-- START: SEEDABLE TABLES --

CREATE TABLE IF NOT EXISTS languages (
    id          INTEGER PRIMARY KEY AUTOINCREMENT,
    name        TEXT NOT NULL,
    description TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS speed_traits (
    id          INTEGER PRIMARY KEY AUTOINCREMENT,
    name        TEXT NOT NULL,
    description TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS senses (
    id          INTEGER PRIMARY KEY AUTOINCREMENT,
    name        TEXT NOT NULL,
    description TEXT NOT NULL,
    yards       INTEGER -- optiuonal, only needed for the Awareness sense
);

CREATE TABLE IF NOT EXISTS immunities (
    id   INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS professions (
    id          INTEGER PRIMARY KEY AUTOINCREMENT,
    name        TEXT,
    description TEXT,
    category    TEXT
);

CREATE TABLE IF NOT EXISTS ancestries (
    id          INTEGER PRIMARY KEY AUTOINCREMENT,
    name        TEXT NOT NULL,
    descriptor  TEXT NOT NULL,
    size        TEXT CHECK (size IN ('Small', 'Medium', 'Large')) NOT NULL,
    speed       INTEGER NOT NULL,
    add_health  INTEGER NOT NULL,
    add_nat_def INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS ancestry_languages (
    ancestry_id REFERENCES ancestries(id) NOT NULL,
    language_id REFERENCES languages(id) NOT NULL
);

CREATE TABLE IF NOT EXISTS ancestry_speed_traits (
    ancestry_id    REFERENCES ancestries(id) NOT NULL,
    speed_trait_id REFERENCES speed_traits(id) NOT NULL
);

CREATE TABLE IF NOT EXISTS ancestry_senses (
    ancestry_id REFERENCES ancestries(id) NOT NULL,
    sense_id    REFERENCES senses(id) NOT NULL
);

CREATE TABLE IF NOT EXISTS ancestry_immunities (
    ancestry_id REFERENCES ancestries(id) NOT NULL,
    immunity_id REFERENCES immunities(id) NOT NULL
);

CREATE TABLE IF NOT EXISTS ancestry_traits (
    ancestry_id REFERENCES ancestries(id) NOT NULL,
    trait_id    REFERENCES traits(id) NOT NULL
);

CREATE TABLE IF NOT EXISTS paths (
    id          INTEGER PRIMARY KEY AUTOINCREMENT,
    name        TEXT NOT NULL,
    kind        TEXT CHECK (kind IN ('Novice', 'Expert', 'Master')) NOT NULL,
    category    TEXT NOT NULL,
    description TEXT NOT NULL,
    ancestry    REFERENCES ancestries(id) -- A novice path with an Ancestry references locks the character to that specific Ancestry record
);

CREATE TABLE IF NOT EXISTS levels (
    id            INTEGER PRIMARY KEY AUTOINCREMENT,
    level         INTEGER NOT NULL,
    add_health    INTEGER NOT NULL,
    add_nat_def   INTEGER DEFAULT 0,
    add_arm_def   INTEGER DEFAULT 0,
    add_bonus_dmg INTEGER DEFAULT 0,
    add_speed     INTEGER DEFAULT 0,
    speed_trait   TEXT, -- Only used for Halfling level 5 (but I haven't checked all master paths yet)
    size          TEXT  -- Only used for Pollywog level 5 (but I haven't checked all master paths yet)
);

CREATE TABLE IF NOT EXISTS level_talents (
    level_id  REFERENCES level(id),
    talent_id REFERENCES talents(id)
);

CREATE TABLE IF NOT EXISTS level_traditions (
    level_id     REFERENCES level(id),
    tradition_id REFERENCES traditions(id)
);

CREATE TABLE IF NOT EXISTS level_languages (
    level_id    REFERENCES level(id),
    language_id REFERENCES languages(id)
);

-- Both magical-based and path-based talents are stored in this table
CREATE TABLE IF NOT EXISTS talents (
    id              INTEGER PRIMARY KEY AUTOINCREMENT,
    name            TEXT NOT NULL,
    description     TEXT NOT NULL,
    magical         BOOL NOT NULL,
    charges         TEXT CHECK (charges IN ('None', 'One', 'OneTwoThree')) NOT NULL,
    restore         TEXT CHECK (charges IN ('None', 'LuckEnds', 'Rest', 'Day', 'Hour', 'Minute', 'StartOfNextTurn', 'EndOfNextTurn')) NOT NULL,
    info_table_id   REFERENCES info_table(id),
    option_block_id REFERENCES option_blocks(id)
);

CREATE TABLE IF NOT EXISTS spells (
    id              INTEGER PRIMARY KEY AUTOINCREMENT,
    name            TEXT NOT NULL,
    description     TEXT NOT NULL,
    path_kind       TEXT CHECK (path_kind IN ('Novice', 'Expert', 'Master')) NOT NULL,
    castings        INTEGER NOT NULL,
    duration        TEXT NOT NULL,
    target          TEXT NOT NULL,
    condition       TEXT,
    ritual          BOOL NOT NULL,
    info_table_id   REFERENCES info_table(id),
    option_block_id REFERENCES option_blocks(id)
);

CREATE TABLE IF NOT EXISTS traditions (
    id            INTEGER PRIMARY KEY AUTOINCREMENT,
    name          TEXT NOT NULL,
    blurb         TEXT NOT NULL,
    description   TEXT NOT NULL,
    info_table_id REFERENCES info_table(id)
);

CREATE TABLE IF NOT EXISTS tradition_special_info (
    tradition_id REFERENCES traditions(id) NOT NULL,
    info         TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS info_table (
    id   INTEGER PRIMARY KEY AUTOINCREMENT,
    kind TEXT CHECK (kind IN ('TABLE', 'BLOCK', 'ROLL')) NOT NULL,
    name TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS info_table_row (
    info_table_id REFERENCES info_table(id) NOT NULL,
    label         TEXT NOT NULL,
    value         TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS option_blocks (
    id   INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS option_block_rows (
    option_block_id REFERENCES option_blocks(id) NOT NULL,
    value           TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS activate_tags (
    id          INTEGER PRIMARY KEY,
    name        TEXT NOT NULL,
    description TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS talent_activations (
    talent_id       REFERENCES talent(id) NOT NULL,
    activate_tag_id REFERENCES activate_tags(id) NOT NULL
);

-- END: SEEDABLE TABLES

-- START: USER-GENERATED RECORD TABLES 

CREATE TABLE IF NOT EXISTS characters (
    id             INTEGER PRIMARY KEY AUTOINCREMENT,
    name           TEXT    NOT NULL,
    level          INTEGER NOT NULL,
    strength       INTEGER,
    agility        INTEGER,
    intellect      INTEGER,
    will           INTEGER,
    ancestry_id    REFERENCES ancestries(id),
    novice_path_id REFERENCES paths(id), 
    master_path_id REFERENCES paths(id), 
    expert_path_id REFERENCES paths(id), 

    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TRIGGER validate_novice_path_assoc BEFORE UPDATE ON characters
FOR EACH ROW
    BEGIN
    SELECT CASE
        WHEN ('Novice' <> (SELECT kind FROM paths WHERE paths.id = NEW.novice_path_id))
            THEN raise(ABORT, 'expected Novice path for character association')
        WHEN ('Expert' <> (SELECT kind FROM paths WHERE paths.id = NEW.expert_path_id))
            THEN raise(ABORT, 'expected Expert path for character association')
        WHEN ('Master' <> (SELECT kind FROM paths WHERE paths.id = NEW.master_path_id))
            THEN raise(ABORT, 'expected Master path for character association')
    END;
END;
